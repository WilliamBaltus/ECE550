-- null
DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- nop
0000 : 00000000000000000000000000000000;
    -- addi $1, $0, 65535      # r1 = 65535 = 0x0000FFFF
0001 : 00101000010000001111111111111111;
    -- sll $2, $1, 15           # r2 = r1 << 15 = 0x7FFF8000 = 2147450880(decimal)
0002 : 00000000100000100000011110010000;
    -- addi $3, $2, 32767       # r3 = r2 + 32767 = 0x7FFFFFFF(hex) = 2147483647(decimal)
0003 : 00101000110001000111111111111111;
    -- addi $4, $0, 1           # r4 = 1
0004 : 00101001000000000000000000000001;
    -- add $6, $1, $4           # r6 = 65535 + 1 = 65536  (normal addition)
0005 : 00000001100000100100000000000000;
    -- sll $7, $4, 31           # r7 = r4 << 31 = 0x80000000(hex) = -2147483648(decimal)
0006 : 00000001110010000000111110010000;
    -- sub $9, $1, $4           # r9 = r1 - r4 = 65535 - 1 = 65534 (normal subtraction)
0007 : 00000010010000100100000000000100;
    -- and $10, $1, $2          # r10 = r1 & r2 = 0x00008000(hex) = 32768(decimal)
0008 : 00000010100000100010000000001000;
    -- or $12, $1, $2           # r12 = r1 | r2 = 0x7FFFFFFF(hex) = 2147483647(decimal)
0009 : 00000011000000100010000000001100;
    -- addi $20, $0, 2          # r20 = 2
0010 : 00101101000000000000000000000010;
    -- add $21, $4, $20         # r21 = 3
0011 : 00000101010010010100000000000000;
    -- sub $22, $20, $4         # r22 = 2 - 1 = 1
0012 : 00000101101010000100000000000100;
    -- and $23, $22, $21        # r23 = 1 & 3 = 1
0013 : 00000101111011010101000000001000;
    -- or $24, $20, $23         # r24 = 2 | 1 = 3
0014 : 00000110001010010111000000001100;
    -- sll $25, $23,1           # r25 = 1 << 1 = 2
0015 : 00000110011011100000000010010000;
    -- sra $26, $25,1           # r26 = 2 >> 1 = 1 
0016 : 00000110101100100000000010010100;
    -- sw $4, 1($0)             # store 1 into address 1
0017 : 00111001000000000000000000000001;
    -- sw $20, 2($0)            # store 2 into address 2
0018 : 00111101000000000000000000000010;
    -- addi $27, $0, 456        # r27 = 456 
0019 : 00101110110000000000000111001000;
    -- sw $1, 0($27)            # store 65535 into address 456
0020 : 00111000011101100000000000000000;
    -- lw $28, 1($0)            # load 1 from address 1 into r28 (r28 = 1)
0021 : 01000111000000000000000000000001;
    -- lw $29, 2($0)            # load 2 from address 2 into r29 (r29 = 2)
0022 : 01000111010000000000000000000010;
    -- lw $19, 0($27)           # load 65535 from address 456 into r19 (r19 = 65535)
0023 : 01000100111101100000000000000000;
    -- addi $13, $0, 1          # r13 = 1
0024 : 00101011010000000000000000000001;
    -- addi $14, $0, 2          # r14 = 2
0025 : 00101011100000000000000000000010;
    -- bne $13, $14, LABEL1     # Branch to LABEL1 if r13 != r14 (this branch will be taken)
0026 : 00010011010111000000000000000001;
    -- nop                      # This line is skipped if branch is taken
0027 : 00000000000000000000000000000000;
    -- LABEL1: nop
0028 : 00000000000000000000000000000000;
    -- addi $15, $0, 100        # r15 = 100 (this line executes after branch)
0029 : 00101011110000000000000001100100;
    -- addi $16, $0, 1          # r16 = 1
0030 : 00101100000000000000000000000001;
    -- addi $17, $0, 1          # r17 = 1
0031 : 00101100010000000000000000000001;
    -- bne $16, $17, LABEL2     # Branch to LABEL2 if r16 != r17 (this branch will NOT be taken)
0032 : 00010100001000100000000000000001;
    -- addi $18, $0, 200        # r18 = 200 (this line executes because branch is NOT taken)
0033 : 00101100100000000000000011001000;
    -- LABEL2: nop
0034 : 00000000000000000000000000000000;
    -- addi $19, $0, 300        # r19 = 300 (this line executes after label)
0035 : 00101100110000000000000100101100;
    -- addi $20, $0, 400        # r20 = 400 (executed before jump)
0036 : 00101101000000000000000110010000;
    -- j TEST_JUMP              # Jump unconditionally to TEST_JUMP
0037 : 00001000000000000000000000100111;
    -- addi $21, $0, 500        # r21 = 500 (this line should be skipped due to the jump)
0038 : 00101101010000000000000111110100;
    -- TEST_JUMP: nop
0039 : 00000000000000000000000000000000;
    -- addi $22, $0, 600        # r22 = 600 (this line is executed after the jump)
0040 : 00101101100000000000001001011000;
    -- nop                      # End of program
0041 : 00000000000000000000000000000000;
[0042 .. 4095] : 00000000000000000000000000000000;
END;
